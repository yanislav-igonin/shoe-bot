generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  username  String?
  firstName String?
  lastName  String?
  language  String?
  isAllowed Boolean  @default(false)
  createdAt DateTime @default(now())
  prompts   Prompt[]
  Images    Image[]

  @@map("users")
}

model Prompt {
  id        String   @id @default(cuid())
  text      String
  result    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  dialogId  String?
  dialog    Dialog?  @relation(fields: [dialogId], references: [id])

  @@map("prompts")
}

model Image {
  id        String   @id @default(cuid())
  prompt    String
  data      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("images")
}

model Chat {
  id        String   @id
  name      String
  type      String
  isAllowed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("chats")
}

model Dialog {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  BotReply  BotReply[]
  Prompt    Prompt[]

  @@map("dialogs")
}

model BotReply {
  id        String   @id
  text      String
  createdAt DateTime @default(now())
  dialogId  String
  dialog    Dialog   @relation(fields: [dialogId], references: [id])

  @@map("bot_replies")
}

// NEEW MODELS
// NEEW MODELS
// NEEW MODELS
// NEEW MODELS
// NEEW MODELS
// NEEW MODELS
// NEEW MODELS
// NEEW MODELS

model NewUser {
  id              Int              @id @default(autoincrement())
  username        String?
  firstName       String?
  lastName        String?
  languageCode    String?
  tgId            String           @unique
  allowedTill     DateTime?        @db.Date
  createdAt       DateTime         @default(now())
  messages        Message[]
  activationCodes ActivationCode[]

  @@map("new_users")
}

enum ChatType {
  private
  group
  supergroup
  channel
}

model NewChat {
  id        Int         @id @default(autoincrement())
  name      String
  type      ChatType
  tgId      String
  createdAt DateTime    @default(now())
  dialogs   NewDialog[]

  @@map("new_chats")
}

model NewDialog {
  id                     Int       @id @default(autoincrement())
  createdAt              DateTime  @default(now())
  chatId                 Int
  chat                   NewChat   @relation(fields: [chatId], references: [id])
  messages               Message[]
  isViolatesOpenAiPolicy Boolean   @default(false)

  @@map("new_dialogs")
}

enum MessageType {
  text
  image
  voice
}

model Message {
  id          Int         @id @default(autoincrement())
  text        String?
  type        MessageType
  userId      Int
  user        NewUser     @relation(fields: [userId], references: [id])
  dialogId    Int?
  dialog      NewDialog?  @relation(fields: [dialogId], references: [id])
  tgPhotoId   String?
  tgMessageId String
  tgVoiceId   String?
  replyToId   Int?
  replyTo     Message?    @relation("Replies", fields: [replyToId], references: [id])
  replies     Message[]   @relation("Replies")
  createdAt   DateTime    @default(now())

  @@map("messages")
}

model ActivationCode {
  id           Int      @id @default(autoincrement())
  code         String   @unique @default(cuid())
  createdAt    DateTime @default(now())
  usedByUserId Int?
  usedByUser   NewUser? @relation(fields: [usedByUserId], references: [id])

  @@map("activation_codes")
}
