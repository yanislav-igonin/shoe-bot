generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // extensions = [vector]
}

model NewUser {
  id              Int              @id @default(autoincrement())
  username        String?
  firstName       String?
  lastName        String?
  languageCode    String?
  tgId            String           @unique
  allowedTill     DateTime?        @db.Date
  createdAt       DateTime         @default(now())
  messages        Message[]
  activationCodes ActivationCode[]
  settings        UserSettings?

  @@map("new_users")
}

enum ChatType {
  private
  group
  supergroup
  channel
}

model NewChat {
  id        Int         @id @default(autoincrement())
  name      String
  type      ChatType
  tgId      String
  createdAt DateTime    @default(now())
  dialogs   NewDialog[]

  @@map("new_chats")
}

model NewDialog {
  id                     Int       @id @default(autoincrement())
  createdAt              DateTime  @default(now())
  chatId                 Int
  chat                   NewChat   @relation(fields: [chatId], references: [id])
  messages               Message[]
  isViolatesOpenAiPolicy Boolean   @default(false)

  @@map("new_dialogs")
}

enum MessageType {
  text
  image
  voice
}

model Message {
  id          Int         @id @default(autoincrement())
  text        String?
  type        MessageType
  userId      Int
  user        NewUser     @relation(fields: [userId], references: [id])
  dialogId    Int?
  dialog      NewDialog?  @relation(fields: [dialogId], references: [id])
  tgPhotoId   String?
  tgMessageId String
  tgVoiceId   String?
  replyToId   Int?
  replyTo     Message?    @relation("Replies", fields: [replyToId], references: [id])
  replies     Message[]   @relation("Replies")
  createdAt   DateTime    @default(now())

  @@map("messages")
}

model ActivationCode {
  id           Int      @id @default(autoincrement())
  code         String   @unique @default(cuid())
  createdAt    DateTime @default(now())
  usedByUserId Int?
  usedByUser   NewUser? @relation(fields: [usedByUserId], references: [id])

  @@map("activation_codes")
}

model BotRole {
  id           Int            @id @default(autoincrement())
  name         String
  systemPrompt String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userSettings UserSettings[]

  @@map("bot_roles")
}

model UserSettings {
  id            Int      @id @default(autoincrement())
  user          NewUser  @relation(fields: [userId], references: [id])
  userId        Int      @unique
  botRoleId Int      @default(1)
  botRole   BotRole  @relation(fields: [botRoleId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("user_settings")
}
